{
    "info": {
        "_postman_id": "b90938fe-4e7d-4e4b-9eac-84b5ebd9f3f7",
        "name": "Test petsAndPetOwners - the whole CRUD",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Create 100 petOwners",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let testData = [{",
                            "  \"firstName\": \"Graig\",",
                            "  \"lastName\": \"Corradino\",",
                            "  \"email\": \"gcorradino0@google.com.au\"",
                            "}, {",
                            "  \"firstName\": \"Gasparo\",",
                            "  \"lastName\": \"Ussher\",",
                            "  \"email\": \"gussher2r@blog.com\"",
                            "}];",
                            "",
                            "",
                            "// Add the test data to an environment variable",
                            "// if that environment varaible does not exist",
                            "if(!pm.environment.get(\"mockDataPersons\")){",
                            "    // since environment variables can only be strings",
                            "    // we need to JSON encode the test data too...",
                            "    pm.environment.set(\"mockDataPersons\",JSON.stringify(testData));",
                            "    pm.environment.set(\"counter\", \"0\");",
                            "}",
                            "",
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get firstName, lastName and email as separate",
                            "// variables from the person at index counter in",
                            "// the mockDataPersons array ",
                            "let {firstName, lastName, email}= mockDataPersons[counter];",
                            "pm.environment.set('firstName', firstName);",
                            "pm.environment.set('lastName', lastName);",
                            "pm.environment.set('email', email);",
                            "",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// get the response data",
                            "let response = pm.response.json();",
                            "",
                            "pm.test(\"Check that the database reports 1 change\", function(){",
                            "    pm.expect(response.changes).to.equal(1);",
                            "});",
                            "",
                            "pm.test(\"Check that we get lastInsertRowid as a number\", function(){",
                            "    pm.expect(response.lastInsertRowid).to.be.a('number');",
                            "});",
                            "",
                            "// Add the id to the person in our mock data",
                            "mockDataPersons[counter].id = response.lastInsertRowid;",
                            "// and resave the mock data as an environment variable",
                            "pm.environment.set('mockDataPersons', JSON.stringify(mockDataPersons));",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Create 100 petOwners\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "http://localhost:3000/api/petOwners",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Get all 100 petOwners at once",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "",
                            "pm.environment.set('numberOfPetOwners', mockDataPersons.length);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "",
                            "let response = pm.response.json();",
                            "",
                            "// Before we can compare reorder the response (that is currentl",
                            "// ordered by descending id - so that is order by ascending id)",
                            "// The simplest to do this is to simply reverse the order",
                            "response = response.reverse();",
                            "",
                            "// Test that the list of petOwners we get from the REST api ar",
                            "// identical to our mockData",
                            "",
                            "pm.test('Check that the data when getting all written petOwners is identical to our mockData', () => {",
                            "    pm.expect(response).to.deep.equal(mockDataPersons);",
                            "});",
                            "",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners?limit={{numberOfPetOwners}}&order=-id",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners"
                    ],
                    "query": [
                        {
                            "key": "limit",
                            "value": "{{numberOfPetOwners}}"
                        },
                        {
                            "key": "order",
                            "value": "-id"
                        }
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Get the 100 petOwners",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// The response from the db",
                            "let response = pm.response.json();",
                            "",
                            "// The person data we expect in the response",
                            "let expectedPerson = mockDataPersons[counter];",
                            "",
                            "pm.test(\"Check that person data was correclty saved in the db, by reading it and comparing it to the original mockdata\", function(){",
                            "    pm.expect(response).to.deep.equal(expectedPerson);",
                            "} );",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Get the 100 petOwners\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Update 100 petOwners",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Add an s at the end of the properties firstName, lastName and email",
                            "mockDataPersons[counter].firstName += 's';",
                            "mockDataPersons[counter].lastName += 's';",
                            "mockDataPersons[counter].email += 's';",
                            "",
                            "// Save the mockDataPersons back to our environement variable",
                            "pm.environment.set('mockDataPersons', JSON.stringify(mockDataPersons));",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);",
                            "",
                            "let {firstName, lastName, email}= mockDataPersons[counter];",
                            "pm.environment.set('firstName', firstName);",
                            "pm.environment.set('lastName', lastName);",
                            "pm.environment.set('email', email);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// get the response data",
                            "let response = pm.response.json();",
                            "",
                            "pm.test(\"Check that the database reports 1 change\", function(){",
                            "    pm.expect(response.changes).to.equal(1);",
                            "});",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Update 100 petOwners\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Get the 100 petOwners again",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// The response from the db",
                            "let response = pm.response.json();",
                            "",
                            "// The person data we expect in the response",
                            "let expectedPerson = mockDataPersons[counter];",
                            "",
                            "pm.test(\"Check that person data was correclty saved in the db, by reading it and comparing it to the original mockdata\", function(){",
                            "    pm.expect(response).to.deep.equal(expectedPerson);",
                            "} );",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Get the 100 petOwners again\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Update 100 petOwners using patch",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Add an s at the end of the properties firstName, lastName and email",
                            "mockDataPersons[counter].firstName += 's';",
                            "mockDataPersons[counter].lastName += 's';",
                            "mockDataPersons[counter].email += 's';",
                            "",
                            "// Save the mockDataPersons back to our environement variable",
                            "pm.environment.set('mockDataPersons', JSON.stringify(mockDataPersons));",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);",
                            "",
                            "let {firstName, lastName, email}= mockDataPersons[counter];",
                            "pm.environment.set('firstName', firstName);",
                            "pm.environment.set('lastName', lastName);",
                            "pm.environment.set('email', email);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// get the response data",
                            "let response = pm.response.json();",
                            "",
                            "pm.test(\"Check that the database reports 1 change\", function(){",
                            "    pm.expect(response.changes).to.equal(1);",
                            "});",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Update 100 petOwners using patch\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Get the 100 petOwners again after patch",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// The response from the db",
                            "let response = pm.response.json();",
                            "",
                            "// The person data we expect in the response",
                            "let expectedPerson = mockDataPersons[counter];",
                            "",
                            "pm.test(\"Check that person data was correclty saved in the db, by reading it and comparing it to the original mockdata\", function(){",
                            "    pm.expect(response).to.deep.equal(expectedPerson);",
                            "} );",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Get the 100 petOwners again after patch\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Delete 100 petOwners",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// get the response data",
                            "let response = pm.response.json();",
                            "",
                            "pm.test(\"Check that the database reports 1 change\", function(){",
                            "    pm.expect(response.changes).to.equal(1);",
                            "});",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Delete 100 petOwners\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Delete 100 non-existing petOwners",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// get the response data",
                            "let response = pm.response.json();",
                            "",
                            "pm.test(\"Check that the database reports 0 changes\", function(){",
                            "    pm.expect(response.changes).to.equal(0);",
                            "});",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Delete 100 non-existing petOwners\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Get 100 non-existing petOwners",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// Get the id of the current mock data person",
                            "let {id} = mockDataPersons[counter];",
                            "// Set the id as an environment variable",
                            "pm.environment.set('id', id);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// \"Unpack\" environment variables into normal local variables",
                            "let mockDataPersons = JSON.parse(pm.environment.get(\"mockDataPersons\"));",
                            "let counter = +pm.environment.get(\"counter\");",
                            "",
                            "// The response from the db",
                            "let response = pm.response.json();",
                            "",
                            "pm.test(\"Check that the deleted petOwner does not exist\", () => {",
                            "    pm.expect(response.error).to.equal('No such post');",
                            "});",
                            "",
                            "pm.test(\"Check that the response status is 404\", () => {",
                            "    pm.expect(pm.response.code).to.equal(404);",
                            "});",
                            "",
                            "// Add one to the counter and save as environment variable",
                            "counter++;",
                            "pm.environment.set('counter', counter);",
                            "",
                            "// If there exist a peson in mockDataPersons",
                            "// with an index corresponding to the counter",
                            "// then run this request again",
                            "if(mockDataPersons[counter]){",
                            "  postman.setNextRequest(\"Get 100 non-existing petOwners\");",
                            "}",
                            "",
                            "else {",
                            "   // we are done reset the counter to 0 ",
                            "   // the help the script in the next request",
                            "   pm.environment.set('counter', '0');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "http://localhost:3000/api/petOwners/{{id}}",
                    "protocol": "http",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "petOwners",
                        "{{id}}"
                    ]
                }
            },
            "response": []
        }
    ]
}